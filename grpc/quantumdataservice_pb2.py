# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: quantumdataservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import api_pb2 as api__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='quantumdataservice.proto',
  package='Autodesk.Quantum.DataService',
  syntax='proto3',
  serialized_pb=_b('\n\x18quantumdataservice.proto\x12\x1c\x41utodesk.Quantum.DataService\x1a\tapi.proto\"\x19\n\x06\x44\x61taId\x12\x0f\n\x07\x64\x61ta_id\x18\x01 \x01(\t\"\x07\n\x05\x45mpty\"R\n\x0cWriteRequest\x12\x0f\n\x07\x64\x61ta_id\x18\x01 \x01(\t\x12\x31\n\x04\x64\x61ta\x18\x02 \x01(\x0b\x32#.com.autodesk.thunderstorm.api.Atom\"\x1e\n\x0bReadRequest\x12\x0f\n\x07\x64\x61ta_id\x18\x01 \x01(\t\"-\n\x0bTestRequest\x12\x0e\n\x06input1\x18\x01 \x01(\x05\x12\x0e\n\x06input2\x18\x02 \x01(\x05\"\x1e\n\x0cTestResponse\x12\x0e\n\x06output\x18\x02 \x01(\x05\x32\xd5\x03\n\x12QuantumDataService\x12\\\n\x03\x61\x64\x64\x12).Autodesk.Quantum.DataService.TestRequest\x1a*.Autodesk.Quantum.DataService.TestResponse\x12S\n\x06\x63reate\x12#.Autodesk.Quantum.DataService.Empty\x1a$.Autodesk.Quantum.DataService.DataId\x12Y\n\x05write\x12*.Autodesk.Quantum.DataService.WriteRequest\x1a$.Autodesk.Quantum.DataService.DataId\x12V\n\x04read\x12).Autodesk.Quantum.DataService.ReadRequest\x1a#.com.autodesk.thunderstorm.api.Atom\x12Y\n\x06\x64\x65lete\x12).Autodesk.Quantum.DataService.ReadRequest\x1a$.Autodesk.Quantum.DataService.DataIdb\x06proto3')
  ,
  dependencies=[api__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_DATAID = _descriptor.Descriptor(
  name='DataId',
  full_name='Autodesk.Quantum.DataService.DataId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data_id', full_name='Autodesk.Quantum.DataService.DataId.data_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=69,
  serialized_end=94,
)


_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='Autodesk.Quantum.DataService.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=96,
  serialized_end=103,
)


_WRITEREQUEST = _descriptor.Descriptor(
  name='WriteRequest',
  full_name='Autodesk.Quantum.DataService.WriteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data_id', full_name='Autodesk.Quantum.DataService.WriteRequest.data_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='Autodesk.Quantum.DataService.WriteRequest.data', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=105,
  serialized_end=187,
)


_READREQUEST = _descriptor.Descriptor(
  name='ReadRequest',
  full_name='Autodesk.Quantum.DataService.ReadRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data_id', full_name='Autodesk.Quantum.DataService.ReadRequest.data_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=189,
  serialized_end=219,
)


_TESTREQUEST = _descriptor.Descriptor(
  name='TestRequest',
  full_name='Autodesk.Quantum.DataService.TestRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='input1', full_name='Autodesk.Quantum.DataService.TestRequest.input1', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='input2', full_name='Autodesk.Quantum.DataService.TestRequest.input2', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=221,
  serialized_end=266,
)


_TESTRESPONSE = _descriptor.Descriptor(
  name='TestResponse',
  full_name='Autodesk.Quantum.DataService.TestResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='output', full_name='Autodesk.Quantum.DataService.TestResponse.output', index=0,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=268,
  serialized_end=298,
)

_WRITEREQUEST.fields_by_name['data'].message_type = api__pb2._ATOM
DESCRIPTOR.message_types_by_name['DataId'] = _DATAID
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['WriteRequest'] = _WRITEREQUEST
DESCRIPTOR.message_types_by_name['ReadRequest'] = _READREQUEST
DESCRIPTOR.message_types_by_name['TestRequest'] = _TESTREQUEST
DESCRIPTOR.message_types_by_name['TestResponse'] = _TESTRESPONSE

DataId = _reflection.GeneratedProtocolMessageType('DataId', (_message.Message,), dict(
  DESCRIPTOR = _DATAID,
  __module__ = 'quantumdataservice_pb2'
  # @@protoc_insertion_point(class_scope:Autodesk.Quantum.DataService.DataId)
  ))
_sym_db.RegisterMessage(DataId)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'quantumdataservice_pb2'
  # @@protoc_insertion_point(class_scope:Autodesk.Quantum.DataService.Empty)
  ))
_sym_db.RegisterMessage(Empty)

WriteRequest = _reflection.GeneratedProtocolMessageType('WriteRequest', (_message.Message,), dict(
  DESCRIPTOR = _WRITEREQUEST,
  __module__ = 'quantumdataservice_pb2'
  # @@protoc_insertion_point(class_scope:Autodesk.Quantum.DataService.WriteRequest)
  ))
_sym_db.RegisterMessage(WriteRequest)

ReadRequest = _reflection.GeneratedProtocolMessageType('ReadRequest', (_message.Message,), dict(
  DESCRIPTOR = _READREQUEST,
  __module__ = 'quantumdataservice_pb2'
  # @@protoc_insertion_point(class_scope:Autodesk.Quantum.DataService.ReadRequest)
  ))
_sym_db.RegisterMessage(ReadRequest)

TestRequest = _reflection.GeneratedProtocolMessageType('TestRequest', (_message.Message,), dict(
  DESCRIPTOR = _TESTREQUEST,
  __module__ = 'quantumdataservice_pb2'
  # @@protoc_insertion_point(class_scope:Autodesk.Quantum.DataService.TestRequest)
  ))
_sym_db.RegisterMessage(TestRequest)

TestResponse = _reflection.GeneratedProtocolMessageType('TestResponse', (_message.Message,), dict(
  DESCRIPTOR = _TESTRESPONSE,
  __module__ = 'quantumdataservice_pb2'
  # @@protoc_insertion_point(class_scope:Autodesk.Quantum.DataService.TestResponse)
  ))
_sym_db.RegisterMessage(TestResponse)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class QuantumDataServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.add = channel.unary_unary(
          '/Autodesk.Quantum.DataService.QuantumDataService/add',
          request_serializer=TestRequest.SerializeToString,
          response_deserializer=TestResponse.FromString,
          )
      self.create = channel.unary_unary(
          '/Autodesk.Quantum.DataService.QuantumDataService/create',
          request_serializer=Empty.SerializeToString,
          response_deserializer=DataId.FromString,
          )
      self.write = channel.unary_unary(
          '/Autodesk.Quantum.DataService.QuantumDataService/write',
          request_serializer=WriteRequest.SerializeToString,
          response_deserializer=DataId.FromString,
          )
      self.read = channel.unary_unary(
          '/Autodesk.Quantum.DataService.QuantumDataService/read',
          request_serializer=ReadRequest.SerializeToString,
          response_deserializer=api__pb2.Atom.FromString,
          )
      self.delete = channel.unary_unary(
          '/Autodesk.Quantum.DataService.QuantumDataService/delete',
          request_serializer=ReadRequest.SerializeToString,
          response_deserializer=DataId.FromString,
          )


  class QuantumDataServiceServicer(object):

    def add(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def write(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def read(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_QuantumDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'add': grpc.unary_unary_rpc_method_handler(
            servicer.add,
            request_deserializer=TestRequest.FromString,
            response_serializer=TestResponse.SerializeToString,
        ),
        'create': grpc.unary_unary_rpc_method_handler(
            servicer.create,
            request_deserializer=Empty.FromString,
            response_serializer=DataId.SerializeToString,
        ),
        'write': grpc.unary_unary_rpc_method_handler(
            servicer.write,
            request_deserializer=WriteRequest.FromString,
            response_serializer=DataId.SerializeToString,
        ),
        'read': grpc.unary_unary_rpc_method_handler(
            servicer.read,
            request_deserializer=ReadRequest.FromString,
            response_serializer=api__pb2.Atom.SerializeToString,
        ),
        'delete': grpc.unary_unary_rpc_method_handler(
            servicer.delete,
            request_deserializer=ReadRequest.FromString,
            response_serializer=DataId.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Autodesk.Quantum.DataService.QuantumDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaQuantumDataServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def add(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def create(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def write(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def read(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def delete(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaQuantumDataServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def add(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    add.future = None
    def create(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    create.future = None
    def write(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    write.future = None
    def read(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    read.future = None
    def delete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    delete.future = None


  def beta_create_QuantumDataService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Autodesk.Quantum.DataService.QuantumDataService', 'add'): TestRequest.FromString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'create'): Empty.FromString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'delete'): ReadRequest.FromString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'read'): ReadRequest.FromString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'write'): WriteRequest.FromString,
    }
    response_serializers = {
      ('Autodesk.Quantum.DataService.QuantumDataService', 'add'): TestResponse.SerializeToString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'create'): DataId.SerializeToString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'delete'): DataId.SerializeToString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'read'): api__pb2.Atom.SerializeToString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'write'): DataId.SerializeToString,
    }
    method_implementations = {
      ('Autodesk.Quantum.DataService.QuantumDataService', 'add'): face_utilities.unary_unary_inline(servicer.add),
      ('Autodesk.Quantum.DataService.QuantumDataService', 'create'): face_utilities.unary_unary_inline(servicer.create),
      ('Autodesk.Quantum.DataService.QuantumDataService', 'delete'): face_utilities.unary_unary_inline(servicer.delete),
      ('Autodesk.Quantum.DataService.QuantumDataService', 'read'): face_utilities.unary_unary_inline(servicer.read),
      ('Autodesk.Quantum.DataService.QuantumDataService', 'write'): face_utilities.unary_unary_inline(servicer.write),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_QuantumDataService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Autodesk.Quantum.DataService.QuantumDataService', 'add'): TestRequest.SerializeToString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'create'): Empty.SerializeToString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'delete'): ReadRequest.SerializeToString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'read'): ReadRequest.SerializeToString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'write'): WriteRequest.SerializeToString,
    }
    response_deserializers = {
      ('Autodesk.Quantum.DataService.QuantumDataService', 'add'): TestResponse.FromString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'create'): DataId.FromString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'delete'): DataId.FromString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'read'): api__pb2.Atom.FromString,
      ('Autodesk.Quantum.DataService.QuantumDataService', 'write'): DataId.FromString,
    }
    cardinalities = {
      'add': cardinality.Cardinality.UNARY_UNARY,
      'create': cardinality.Cardinality.UNARY_UNARY,
      'delete': cardinality.Cardinality.UNARY_UNARY,
      'read': cardinality.Cardinality.UNARY_UNARY,
      'write': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Autodesk.Quantum.DataService.QuantumDataService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
